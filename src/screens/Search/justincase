import React, { useState, useEffect } from "react";
import axios from "axios";
import { View, Text, FlatList, TextInput, TouchableHighlight, Image } from "react-native";


//create a function that accepts user input and returns the ingredients
const SearchScreen = ({ navigation }) => {
  const [value, setValue] = useState("");
  const [category, setCategory] = useState("");
  const [ingredients, setIngredients] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchIngredients = async () => {
      try {
        const queryObject = {
          q: searchTerm,
        };

        const options = {
          method: "GET",
          url: "https://simplkitchenapi.onrender.com/api/v1/search/ingredients",
          params: queryObject,
        };

        const response = await axios.request(options);
        setIngredients(response.data.ingredients);
      } catch (error) {
        console.error("An error occurred:", error);
      }
    };

    fetchIngredients();
  }, [searchTerm]);

  const handleSearch = (text) => {
    setSearchTerm(text);
  };


  const onPressRecipe = (item) => {
    let name = getIngredientName(item.ingredientId);
    let ingredient = item.ingredientId;
    navigation.navigate("Pantry", { ingredient, name });
  };

  const onPressIngredient = (item) => {
    let name = getIngredientName(item.ingredientId);
    let ingredient = item.ingredientId;
    navigation.navigate("IngredientsDetail", { ingredient, name });//This could be wrong for now
  };

  const getCategoryName = (categoryId) => {
    // TODO: Implement this function
    return "";
  };

  const getIngredientName = (ingredientId) => {
    // TODO: Implement this function
    return "";
  };

  const renderRecipes = ({ item }) => (
    <TouchableHighlight underlayColor="rgba(73,182,77,0.9)" onPress={() => onPressRecipe(item)}>
      <View style={styles.container}>
        <Image style={styles.photo} source={{ uri: item.photo_url }} />
        <Text style={styles.title}>{item.title}</Text>
        <Text style={styles.category}>{getCategoryName(item.categoryId)}</Text>
      </View>
    </TouchableHighlight>
  );

  const renderIngredident = ({ item }) => (
    <TouchableHighlight
      underlayColor="rgba(73,182,77,0.9)"
      onPress={() => onPressIngredient(item)}
    >
      <View style={styles.container}>
        <Image style={styles.photo} source={{ uri: item.photo_url }} />
        <Text style={styles.title}>{item.title}</Text>
        <Text style={styles.category}>{getCategoryName(item.categoryId)}</Text>
      </View>
    </TouchableHighlight>
  );

  const filteredIngredients =
    ingredients &&
    ingredients.filter((ingredient) =>
      ingredient.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

return (
    <View>
      <View style={styles.container}>
      <TextInput
        placeholder="Search for ingredients"
        onChangeText={handleSearch}
        value={searchTerm}
      />
      <FlatList
        data={filteredIngredients}
        renderItem={renderIngredident}
        keyExtractor={(item) => item.ingredientId}
      />
    </View>
      <FlatList 
        vertical 
        showsVerticalScrollIndicator={false} 
        numColumns={2} 
        data={data} 
        renderItem={renderRecipes} 
        keyExtractor={(item) => `${item.recipeId}`} 
      />
      <FlatList 
        vertical 
        showsVerticalScrollIndicator={false} 
        numColumns={2} 
        data={filteredIngredients} 
        renderItem={renderIngredident} 
        keyExtractor={(item) => `${item.ingredientId}`} 
      />
    </View>
  );
};

export default SearchScreen;
